FunD plusFloatBBTF_1
    [Clause
        [VarP entityName_2, VarP bbCtx_3]
        (GuardedB [
            (PatG [
                -- Binding inputs
                BindS (ListP [VarP clk_4, VarP a_5, VarP b_6])
                      (AppE (AppE (VarE GHC.Base.map) (VarE Data.Tuple.fst))
                            (AppE (VarE Clash.Primitives.DSL.tInputs) (VarE bbCtx_3))),
                BindS (ListP [VarP result_7])
                      (AppE (VarE Clash.Primitives.DSL.tResults) (VarE bbCtx_3))
            ], DoE Nothing [
                -- Naming instance
                BindS (VarP plusFloatInstName_8)
                      (AppE (VarE Clash.Netlist.Id.makeBasic)
                            (InfixE (Just (VarE entityName_2)) (VarE GHC.Base.<>) (Just (LitE (StringL "_inst"))) )),

                -- Defining component inputs and outputs
                LetS [
                    ValD (VarP compInps_10) (NormalB
                        (AppE (AppE (VarE GHC.List.zip)
                                    (ListE [LitE (StringL "clk"), LitE (StringL "X"), LitE (StringL "Y")]))
                              (AppE (AppE (VarE GHC.Base.map) (VarE Data.Tuple.snd))
                                    (AppE (VarE Clash.Primitives.DSL.tInputs) (VarE bbCtx_3)))))
                        []),
                    ValD (VarP compOuts_9) (NormalB
                        (ListE [TupE [Just (LitE (StringL "R")), Just (AppE (ConE Clash.Netlist.Types.Unsigned) (LitE (IntegerL 12)))]]))
                        []
                ],

                -- Compiling the block
                NoBindS (InfixE
                    (Just (AppE (VarE Clash.Primitives.DSL.declaration)
                           (Just (LitE (StringL "_inst_block"))) ))
                    (VarE GHC.Base.$)
                    (Just (DoE Nothing [
                        NoBindS (AppE (AppE (AppE (VarE Clash.Primitives.DSL.compInBlock)
                                                (VarE entityName_2))
                                          (VarE compInps_10))
                                  (VarE compOuts_9)),
                        LetS [
                            ValD (VarP inps_12) (NormalB (ListE [
                                TupE [Just (LitE (StringL "clk")), Just (VarE clk_4)],
                                TupE [Just (LitE (StringL "X")), Just (VarE a_5)],
                                TupE [Just (LitE (StringL "Y")), Just (VarE b_6)]
                            ])) [],
                            ValD (VarP outs_11) (NormalB (ListE [TupE [Just (LitE (StringL "R")), Just (VarE result_7)]])) []
                        ],
                        NoBindS (AppE (AppE (AppE (AppE (AppE (AppE (VarE Clash.Primitives.DSL.instDecl)
                                                                 (ConE Clash.Netlist.Types.Empty))
                                                        (AppE (VarE Clash.Netlist.Id.unsafeMake) (VarE entityName_2)))
                                                  (VarE plusFloatInstName_8))
                                            (ConE GHC.Types.[]))
                                      (VarE inps_12))
                                  (VarE outs_11))
                    ]))
            ]),

            -- Error handler if the pattern match fails
            (NormalG (VarE GHC.Base.otherwise),
             InfixE (Just (VarE GHC.Err.error))
                    (VarE GHC.Base.$)
                    (Just (AppE (VarE Text.Show.Pretty.ppShow) (VarE bbCtx_3))) )
        ])
        []
    ]

let funcDec = FunD bbtfName
        [ Clause
            [VarP entityNameName, VarP bbCtx]
            (GuardedB 
                [ (PatG 
                    [ -- Binding inputs
                        BindS (ListP [VarP x | x <- inputNamesList])
                            (AppE (AppE (VarE 'GHC.Base.map) (VarE 'Data.Tuple.fst))
                                (AppE (VarE 'Clash.Primitives.DSL.tInputs) (VarE bbCtx))),
                        BindS (ListP [VarP r | r <- outputNamesList])
                            (AppE (VarE 'Clash.Primitives.DSL.tResults) (VarE bbCtx))
                    ], 
                    DoE Nothing 
                        [ -- Naming instance
                            BindS (VarP entityNameInstName)
                                (AppE (VarE 'Clash.Netlist.Id.makeBasic) (LitE (StringL entityNameInst))),

                          -- Defining component inputs and outputs
                            LetS 
                            [ ValD (VarP compInps) 
                                  (NormalB 
                                    (AppE (AppE (VarE 'GHC.List.zip)
                                            (ListE [LitE (StringL x) | x <- inputNamesListstr]))
                                        (AppE (AppE (VarE 'GHC.Base.map) (VarE 'Data.Tuple.snd))
                                            (AppE (VarE 'Clash.Primitives.DSL.tInputs) (VarE bbCtx)))))
                                  [],
                              ValD (VarP compOuts) 
                                  (NormalB 
                                    (ListE [TupE [Just (LitE (StringL "R")), Just (AppE (ConE 'Clash.Netlist.Types.Unsigned) (LitE (IntegerL 12)))]]))
                                  []
                            ],

                          -- Compiling the block
                          NoBindS (InfixE
                            (Just (AppE (VarE 'Clash.Primitives.DSL.declaration) (LitE (StringL entityNameInstBlockstr))))
                            (VarE 'GHC.Base.$)
                            (Just (DoE Nothing
                                [ NoBindS (AppE (AppE (AppE (VarE 'Clash.Primitives.DSL.compInBlock)
                                                (VarE entityNameInstName))
                                            (VarE compInps))
                                    (VarE compOuts)),
                                  LetS 
                                    [ ValD (VarP inps) 
                                          (NormalB 
                                            (ListE [ TupE [Just (LitE (StringL x)), Just (VarE y)] 
                                                    | (x, y) <- zip inputNamesListstr inputNamesList]))
                                          [],
                                      ValD (VarP outs) 
                                          (NormalB 
                                            (ListE [TupE [Just (LitE (StringL x)), Just (VarE y)] 
                                                    | (x, y) <- zip outputNamesListstr outputNamesList]))
                                          []
                                    ],
                                  NoBindS (AppE (AppE (AppE (AppE (AppE (AppE (VarE 'Clash.Primitives.DSL.instDecl)
                                                                     (ConE 'Clash.Netlist.Types.Empty))
                                                        (AppE (VarE 'Clash.Netlist.Id.unsafeMake) (VarE entityNameName)))
                                                  (VarE entityNameInstName))
                                            (ConE 'GHC.Types.[]))
                                      (VarE inps))
                                    (VarE outs))
                                ])))
                        ]))
                , (NormalG (VarE 'GHC.Base.otherwise),
                   InfixE (Just (VarE 'GHC.Err.error))
                          (VarE 'GHC.Base.$)
                          (Just (AppE (VarE 'Text.Show.Pretty.ppShow) (VarE bbCtx))))
                ])
            []
        ]


let funDec
         = FunD
             bbtfName
             [Clause
                [VarP entityNameName, VarP bbCtx]
                (GuardedB
                   [(PatG
                       [BindS
                          (ListP [VarP x | x <- inputNamesList])
                          (AppE
                             (AppE (VarE 'Prelude.map) (VarE 'Prelude.fst))
                             (AppE (VarE 'DSL.tInputs) (VarE bbCtx))),
                        BindS
                          (ListP [VarP r | r <- outputNamesList])
                          (AppE (VarE 'DSL.tResults) (VarE bbCtx))], 
                     DoE
                       Nothing
                       [BindS
                          (VarP entityNameInstName)
                          (AppE (VarE 'Id.makeBasic) (LitE (StringL entityNameInststr))),
                        LetS
                          [ValD
                             (VarP compInps)
                             (NormalB
                                (ListE
                                   [TupE
                                      [Just (LitE (StringL x)),
                                       Just (AppE (VarE 'DSL.ety) (VarE y))] |
                                      (x, y) <- zip inputNamesListstr inputNamesList]))
                             [],
                           ValD
                             (VarP compOuts)
                             (NormalB
                                (ListE
                                   [TupE
                                      [Just (LitE (StringL x)),
                                       Just (AppE (VarE 'DSL.ety) (VarE y))] |
                                      (x, y) <- zip outputNamesListstr outputNamesList]))
                             []],
                        NoBindS
                          (InfixE
                             (Just
                                (AppE
                                   (VarE 'DSL.declaration) (LitE (StringL entityNameInstBlockstr))))
                             (VarE '($))
                             (Just
                                (DoE
                                   Nothing
                                   [NoBindS
                                      (AppE
                                         (AppE
                                            (AppE (VarE 'DSL.compInBlock) (VarE entityNameName))
                                            (VarE compInps))
                                         (VarE compOuts)),
                                    LetS
                                      [ValD
                                         (VarP inps)
                                         (NormalB
                                            (ListE
                                               [TupE [Just (LitE (StringL x)), Just (VarE y)] |
                                                  (x, y) <- Prelude.zip
                                                              inputNamesListstr inputNamesList]))
                                         [],
                                       ValD
                                         (VarP outs)
                                         (NormalB
                                            (ListE
                                               [TupE [Just (LitE (StringL x)), Just (VarE y)] |
                                                  (x, y) <- Prelude.zip
                                                              outputNamesListstr outputNamesList]))
                                         []],
                                    NoBindS
                                      (AppE
                                         (AppE
                                            (AppE
                                               (AppE
                                                  (AppE
                                                     (AppE (VarE 'DSL.instDecl) (ConE 'N.Empty))
                                                     (AppE
                                                        (VarE 'Id.unsafeMake)
                                                        (VarE entityNameName)))
                                                  (VarE entityNameInstName))
                                               (ConE '[]))
                                            (VarE inps))
                                         (VarE outs))])))]),
                    (NormalG (VarE 'otherwise), 
                     AppE
                       (VarE 'error)
                       (AppE (VarE 'Text.Show.Pretty.ppShow) (VarE bbCtx)))])
                []]

let funSig
         = SigD
             bbtfName
             (ForallT
                [PlainTV s_0 SpecifiedSpec]
                [AppT (ConT ''Clash.Backend.Backend) (VarT s_0)]
                (AppT
                   (AppT ArrowT (ConT ''Text))
                   (AppT
                      (AppT ArrowT (ConT ''Clash.Netlist.Types.BlackBoxContext))
                      (AppT
                         (AppT (ConT ''State) (VarT s_0))
                         (ConT ''Data.Text.Prettyprint.Doc.Extra.Doc)))))
   return [funSig, funDec]